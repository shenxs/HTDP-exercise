(def {fun}
     (lambda {args body}
             {def (head args)
                  (lambda (cdr args) body)}))
(fun {len l}
     {if (=? l {})
         0
         {+ 1 (len (cdr l))}})

(fun {apply f l}
     {eval (join (list f) l)})

(fun {map f l}
     {if (=? l {})
         {value {}}
         {join (list (f (car l))) (map f (cdr l))}})

(fun {reverse l}
     {if (=? l {})
         {value {}}
         {join (reverse (cdr l)) (head l) }})

(fun {filter f l}
     {if (=? l {})
         {value {}}
         {if (f (car l))
             {join (head l) (filter f (cdr l))}
             {filter f (cdr l)}}})

(fun {odd? x} {=? 1 (% x 2)})

(fun {even? x} {not (odd? x)})


